# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
import math
from ccxt.base.errors import ExchangeError


class mxc(Exchange):

    def describe(self):
        return self.deep_extend(super(mxc, self).describe(), {
            'id': 'mxc',
            'name': 'MXC',
            'countries': ['CN'],
            'version': 'v2',
            'rateLimit': 1000,
            'hostname': 'www.mxc.com',
            'has': {
                'CORS': False,
                'createMarketOrder': False,
                'fetchTickers': False,
                'withdraw': False,
                'fetchDeposits': False,
                'fetchWithdrawals': False,
                'fetchTransactions': False,
                'createDepositAddress': False,
                'fetchDepositAddress': False,
                'fetchClosedOrders': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrderTrades': False,
                'fetchOrders': True,
                'fetchOrder': True,
                'fetchMyTrades': True,
            },
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '60m': '60m',
                '1h': '1h',
                # '2h': '2h',
                # '4h': '4h',
                # '6h': '6h',
                # '12h': '12h',
                '1d': '1d',
                # '1w': '1w',
                '1M': '1M',
            },
            'urls': {
                'logo': '',
                'api': 'https://{hostname}',
                'www': 'https://mxc.com/',
                'doc': 'https://mxcdevelop.github.io/APIDoc/',
                'fees': [
                    'https://www.mxc.com/info/fee',
                ],
                'referral': '',
            },
            'api': {
                'public': {
                    'get': [
                        'market/symbols',
                        'market/depth',
                        'market/kline',
                        'market/ticker',
                        'market/deals',
                    ],
                },
                'private': {
                    'get': [
                        'account/info',
                        'current/orders',
                        'order/list',
                        'order/query',
                        'order/deals',
                    ],
                    'post': [
                        'order/place',
                    ],
                    'delete': [
                        'order/cancel',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'maker': 0.002,
                    'taker': 0.002,
                },
            },
            'exceptions': {
            },
            # https://gate.io/api2#errCode
            'errorCodeNames': {
            },
            'options': {
                'limits': {
                    'cost': {
                        'min': {
                            'BTC': 0.0001,
                            'ETH': 0.001,
                            'USDT': 1,
                        },
                    },
                },
            },
        })

    def fetch_markets(self, params={}):
        response = self.publicGetMarketSymbols(params)
        markets = self.safe_value(response, 'data')
        if not markets or len(markets) < 1:
            raise ExchangeError(self.id + ' fetchMarkets got an unrecognized response')
        result = []
        for i in range(0, len(markets)):
            market = markets[i]
            id = self.safe_string(market, 'symbol')
            # all of their symbols are separated with an underscore
            # but not boe_eth_eth(BOE_ETH/ETH) which has two underscores
            # https://github.com/ccxt/ccxt/issues/4894
            parts = id.split('_')
            numParts = len(parts)
            baseId = parts[0]
            quoteId = parts[1]
            if numParts > 2:
                baseId = parts[0] + '_' + parts[1]
                quoteId = parts[2]
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote
            precision = {
                'amount': 8,
                'price': self.safe_integer(market, 'price_scale'),
            }
            maker = self.safe_float(market, 'maker_fee_rate')
            taker = self.safe_float(market, 'taker_fee_rate')
            minAmount = self.safe_float(market, 'min_amount')
            maxAmount = self.safe_float(market, 'max_amount')
            minQuantity = math.pow(10, -self.safe_integer(market, 'quantity_scale'))
            minPrice = math.pow(10, -self.safe_integer(market, 'price_scale'))
            state = self.safe_string(market, 'state')
            active = state == 'ENABLED'
            result.append({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'active': active,
                'maker': maker,
                'taker': taker,
                'precision': precision,
                'limits': {
                    'amount': {
                        'min': minQuantity,
                        'max': None,
                    },
                    'price': {
                        'min': minPrice,
                        'max': None,
                    },
                    'cost': {
                        'min': minAmount,
                        'max': maxAmount,
                    },
                },
                'info': market,
            })
        return result

    def fetch_balance(self, params={}):
        self.load_markets()
        response = self.privateGetAccountInfo(params)
        balances = self.safe_value(response, 'data')
        result = {'info': balances}
        currencyIds = list(balances.keys())
        for i in range(0, len(currencyIds)):
            currencyId = currencyIds[i]
            code = self.safe_currency_code(currencyId)
            account = self.account()
            if code in balances:
                account['free'] = self.safe_float(balances[currencyId], 'available')
                account['used'] = self.safe_float(balances[currencyId], 'frozen')
            result[code] = account
        return self.parse_balance(result)

    def fetch_order_book(self, symbol, limit=None, params={}):
        self.load_markets()
        request = {
            'depth': limit or 5,
            'symbol': self.market_id(symbol),
        }
        response = self.publicGetMarketDepth(self.extend(request, params))
        orderBook = self.safe_value(response, 'data')
        return self.parse_order_book(orderBook, None, 'bids', 'asks', 'price', 'quantity')

    def parse_ohlcv(self, ohlcv, market=None, timeframe='1m', since=None, limit=None):
        # they return [Timestamp, Volume, Close, High, Low, Open]
        return [
            int(ohlcv[0] * 1000),   # t
            float(ohlcv[1]),  # o
            float(ohlcv[3]),  # h
            float(ohlcv[4]),  # l
            float(ohlcv[2]),  # c
            float(ohlcv[5]),  # v
        ]

    def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': self.market_id(symbol),
            'interval': self.timeframes[timeframe],
            'start_time': self.seconds(),
        }
        # max limit = 1000
        if limit is not None:
            request['limit'] = limit
        if since is not None:
            request['start_time'] = int(since / 1000)
        response = self.publicGetMarketKline(self.extend(request, params))
        #        ordering: Ts, O, C, H, L, V
        #     {
        #         "code": 200,
        #         "data": [
        #             ["TS", "o", "c", "h", "l", "v"],
        #         ]
        #     }
        #
        data = self.safe_value(response, 'data', [])
        return self.parse_ohlcvs(data, market, timeframe, since, limit)

    def parse_ticker(self, ticker, market=None):
        symbol = None
        if market:
            symbol = market['symbol']
        timestamp = self.safe_integer(ticker, 'time')
        open = self.safe_float(ticker, 'open')
        last = self.safe_float(ticker, 'last')
        change = None
        average = None
        percentage = None
        if (open is not None) and (last is not None):
            change = last - open
            average = self.sum(open, last) / 2
            if (last is not None) and (last > 0):
                percentage = (change / open) * 100
        return {
            'symbol': symbol,
            'info': ticker,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(ticker, 'high'),
            'low': self.safe_float(ticker, 'low'),
            'bid': self.safe_float(ticker, 'bid'),
            'bidVolume': None,
            'ask': self.safe_float(ticker, 'ask'),
            'askVolume': None,
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': change,
            'percentage': percentage,
            'average': average,
            'baseVolume': self.safe_float(ticker, 'volume'),  # gateio has them reversed
            'quoteVolume': None,
        }

    def fetch_tickers(self, symbols=None, params={}):
    #     self.load_markets()
    #     response = self.publicGetMarketTicker(params)
    #     result = {}
    #     data = self.safe_value(response, 'data', [])
    #     ids = list(data.keys())
    #     for i in range(0, len(ids)):
    #         id = ids[i]
    #         baseId, quoteId = id.split('_')
    #         base = baseId.upper()
    #         quote = quoteId.upper()
    #         base = self.safe_currency_code(base)
    #         quote = self.safe_currency_code(quote)
    #         symbol = base + '/' + quote
    #         market = None
    #         if symbol in self.markets:
    #             market = self.markets[symbol]
    #         }
    #         if id in self.markets_by_id:
    #             market = self.markets_by_id[id]
    #         }
    #         result[symbol] = self.parse_ticker(data[id], market)
    #     }
    #     return result

    def fetch_ticker(self, symbol, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': self.market_id(symbol),
        }
        response = self.publicGetMarketTicker(self.extend(request, params))
        ticker = self.safe_value(response, 'data', [])[0]
        return self.parse_ticker(ticker, market)

    def parse_trade(self, trade, market=None):
        timestamp = self.safe_integer_2(trade, 'create_time', 'trade_time')
        symbol = None
        if market is not None:
            symbol = market['symbol']
        # take either of orderid or orderId
        id = self.safe_string(trade, 'order_id')
        side = self.safe_string(trade, 'trade_type')
        isTaker = self.safe_value(trade, 'is_taker')
        price = self.safe_float_2(trade, 'price', 'trade_price')
        amount = self.safe_float_2(trade, 'quantity', 'trade_quantity')
        cost = None
        if price is not None and amount is not None:
            cost = price * amount
        feeCost = self.safe_float(trade, 'fee')
        feeCurrency = self.safe_string(trade, 'fee_currency')
        fee = None
        if (feeCost is not None) and (feeCurrency is not None):
            fee = {
                'cost': feeCost,
                'currency': feeCurrency,
                'rate': None,
            }
        return {
            'info': trade,
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'order': id,
            'type': 'limit',
            'side': side == 'buy' if 'BID' else 'sell',
            'takerOrMaker': 'taker' if isTaker else 'maker',
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': self.market_id(symbol),
        }
        # max limit = 1000
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetMarketDeals(self.extend(request, params))
        data = self.safe_value(response, 'data')
        return self.parse_trades(data, market, since, limit)

    def parse_order_side(self, side):
        sides = {
            'BID': 'buy',
            'ASK': 'sell',
        }
        return self.safe_string(sides, side, side)

    def parse_order_status(self, status):
        statuses = {
            'NEW': 'open',
            'FILLED': 'closed',
            'PARTIALLY_FILLED': 'open',  # partial closed
            'CANCELED': 'canceled',
            'PARTIALLY_CANCELED': 'canceled',  # partial canceled
        }
        return self.safe_string(statuses, status, status)

    def parse_order_type(self, type):
    #     types = {
    #         'LIMIT_ORDER': 'limit',
    #         'POST_ONLY': 'limit',
    #     }
    #     return self.safe_string(types, type, type)

    def parse_order(self, order, market=None):
        # Different API endpoints returns order info in different format...
        # with different fields filled.
        id = self.safe_string(order, 'id')
        timestamp = self.safe_integer(order, 'create_time')
        status = self.parse_order_status(self.safe_string(order, 'state'))
        symbol = None
        marketId = self.safe_string(order, 'symbol')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
        if market is not None:
            symbol = market['symbol']
        side = self.parse_order_side(self.safe_string(order, 'type'))
        price = self.safe_float(order, 'price')
        amount = self.safe_float(order, 'quantity')
        filled = self.safe_float(order, 'deal_quantity')
        cost = self.safe_float(order, 'deal_amount')
        remaining = None
        average = None
        if filled is not None:
            if amount is not None:
                remaining = amount - filled
            if (cost is not None) and (filled > 0):
                average = cost / filled
        return {
            'id': id,
            'datetime': self.iso8601(timestamp),
            'timestamp': timestamp,
            'lastTradeTimestamp': None,
            'status': status,
            'symbol': symbol,
            'type': 'limit',
            'side': side,
            'price': price,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': cost,
            'average': average,
            'trades': None,
            'fee': {
                'cost': None,
                'currency': None,
                'rate': None,
            },
            'info': order,
        }

    def fetch_order(self, id, symbol=None, params={}):
        self.load_markets()
        request = {
            'order_ids': id,
        }
        response = self.privateGetOrderQuery(self.extend(request, params))
        data = self.safe_value(response, 'data', [])
        return self.parse_order(data[0])

    def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        request = {
            'symbol': self.market_id(symbol),
            'start_time': self.seconds(),
        }
        # max limit = 1000
        if limit is not None:
            request['limit'] = limit
        if since is not None:
            request['start_time'] = int(since / 1000)
        response = self.privateGetOrderList(self.extend(request, params))
        data = self.safe_value(response, 'data')
        return self.parse_orders(data, None, since, limit)

    def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        request = {
            'states': 'NEW,PARTIALLY_FILLED',
        }
        return self.fetch_orders(symbol, since, limit, self.extend(request, params))

    def fetch_closed_orders(self, symbol=None, since=None, limit=None, params={}):
        request = {
            'states': 'FILLED',
        }
        return self.fetch_orders(symbol, since, limit, self.extend(request, params))

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        if type == 'market':
            raise ExchangeError(self.id + ' allows limit orders only')
        self.load_markets()
        request = {
            'symbol': self.market_id(symbol),
            'price': price,
            'quantity': amount,
            'trade_type': 'BID' if (side == 'buy') else 'ASK',
        }
        if type == 'limit':
            request.order_type = 'LIMIT_ORDER'
        response = self.privatePostOrderPlace(self.extend(request, params))
        id = self.safe_string(response, 'data')
        timestamp = self.milliseconds()
        order = {
            'symbol': self.market_id(symbol),
            'id': id,
            'price': price,
            'quantity': amount,
            'create_time': timestamp,
            'state': 'NEW',
            'type': request.trade_type,
        }
        return self.parse_order(order)

    def cancel_order(self, id, symbol=None, params={}):
        self.load_markets()
        request = {
            'order_ids': id,
        }
        response = self.privateDeleteOrderCancel(self.extend(request, params))
        data = self.safe_value(response, 'data')
        order = {
            'id': id,
            'state': 'CANCELED',
            'info': data,
        }
        return self.parse_order(order)

    def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': self.market_id(symbol),
        }
        # max limit = 1000
        if limit is not None:
            request['limit'] = limit
        if since is not None:
            request['start_time'] = int(since / 1000)
        response = self.privateGetOrderDeals(self.extend(request, params))
        data = self.safe_value(response, 'data')
        return self.parse_trades(data, market, since, limit)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        path1 = `/open/api/${self.version}/`
        origin = self.urls['api']
        url = self.implode_params(origin, self.extend({'hostname': self.hostname}, params)) + path1 + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path), self.extract_params(origin))
        request = {
            'api_key': self.apiKey,
        }
        if api == 'public':
            request = self.extend(request, query)
            if request:
                url += '?' + self.urlencode(request)
        else:
            self.check_required_credentials()
            request.req_time = self.seconds()
            if 'recv_window' in params:
                request.recv_window = params.recv_window
            if method != 'POST':
                request = self.extend(request, query)
            request = self.keysort(request)
            auth = self.urlencode(request)
            signature = self.hmac(self.encode('\n'.join([method, `${path1}${path}`, auth])), self.encode(self.secret), 'sha256')
            suffix = 'sign=' + signature
            url += '?' + auth + '&' + suffix
            if method == 'POST':
                body = self.json(query)
                headers = {
                    'Content-Type': 'application/json',
                }
            else:
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return
        if code >= 400:
            errorCode = self.safe_string(response, 'code')
            message = self.safe_string(response, 'msg', body)
            if errorCode is not None:
                feedback = self.safe_string(self.errorCodeNames, errorCode, message)
                self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)
