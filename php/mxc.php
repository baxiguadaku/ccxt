<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import

class mxc extends Exchange {

    public function describe () {
        return array_replace_recursive(parent::describe (), array(
            'id' => 'mxc',
            'name' => 'MXC',
            'countries' => array( 'CN' ),
            'version' => 'v2',
            'rateLimit' => 1000,
            'hostname' => 'www.mxc.com',
            'has' => array(
                'CORS' => false,
                'createMarketOrder' => false,
                'fetchTickers' => false,
                'withdraw' => false,
                'fetchDeposits' => false,
                'fetchWithdrawals' => false,
                'fetchTransactions' => false,
                'createDepositAddress' => false,
                'fetchDepositAddress' => false,
                'fetchClosedOrders' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrderTrades' => false,
                'fetchOrders' => true,
                'fetchOrder' => true,
                'fetchMyTrades' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '60m' => '60m',
                '1h' => '1h',
                // '2h' => '2h',
                // '4h' => '4h',
                // '6h' => '6h',
                // '12h' => '12h',
                '1d' => '1d',
                // '1w' => '1w',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => '',
                'api' => 'https://{hostname}',
                'www' => 'https://mxc.com/',
                'doc' => 'https://mxcdevelop.github.io/APIDoc/',
                'fees' => array(
                    'https://www.mxc.com/info/fee',
                ),
                'referral' => '',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market/symbols',
                        'market/depth',
                        'market/kline',
                        'market/ticker',
                        'market/deals',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/info',
                        'current/orders',
                        'order/list',
                        'order/query',
                        'order/deals',
                    ),
                    'post' => array(
                        'order/place',
                    ),
                    'delete' => array(
                        'order/cancel',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'maker' => 0.002,
                    'taker' => 0.002,
                ),
            ),
            'exceptions' => array(
            ),
            // https://gate.io/api2#errCode
            'errorCodeNames' => array(
            ),
            'options' => array(
                'limits' => array(
                    'cost' => array(
                        'min' => array(
                            'BTC' => 0.0001,
                            'ETH' => 0.001,
                            'USDT' => 1,
                        ),
                    ),
                ),
            ),
        ));
    }

    public function fetch_markets ($params = array ()) {
        $response = $this->publicGetMarketSymbols ($params);
        $markets = $this->safe_value($response, 'data');
        if (!$markets || strlen($markets) < 1) {
            throw new ExchangeError($this->id . ' fetchMarkets got an unrecognized response');
        }
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'symbol');
            // all of their symbols are separated with an underscore
            // but not boe_eth_eth (BOE_ETH/ETH) which has two underscores
            // https://github.com/ccxt/ccxt/issues/4894
            $parts = explode('_', $id);
            $numParts = is_array($parts) ? count($parts) : 0;
            $baseId = $parts[0];
            $quoteId = $parts[1];
            if ($numParts > 2) {
                $baseId = $parts[0] . '_' . $parts[1];
                $quoteId = $parts[2];
            }
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array(
                'amount' => 8,
                'price' => $this->safe_integer($market, 'price_scale'),
            );
            $maker = $this->safe_float($market, 'maker_fee_rate');
            $taker = $this->safe_float($market, 'taker_fee_rate');
            $minAmount = $this->safe_float($market, 'min_amount');
            $maxAmount = $this->safe_float($market, 'max_amount');
            $minQuantity = pow(10, -$this->safe_integer($market, 'quantity_scale'));
            $minPrice = pow(10, -$this->safe_integer($market, 'price_scale'));
            $state = $this->safe_string($market, 'state');
            $active = $state === 'ENABLED';
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => $active,
                'maker' => $maker,
                'taker' => $taker,
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => $minQuantity,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => $minPrice,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $minAmount,
                        'max' => $maxAmount,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetAccountInfo ($params);
        $balances = $this->safe_value($response, 'data');
        $result = array( 'info' => $balances );
        $currencyIds = is_array($balances) ? array_keys($balances) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account ();
            if (is_array($balances) && array_key_exists($code, $balances)) {
                $account['free'] = $this->safe_float($balances[$currencyId], 'available');
                $account['used'] = $this->safe_float($balances[$currencyId], 'frozen');
            }
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'depth' => $limit || 5,
            'symbol' => $this->market_id($symbol),
        );
        $response = $this->publicGetMarketDepth (array_merge($request, $params));
        $orderBook = $this->safe_value($response, 'data');
        return $this->parse_order_book($orderBook, null, 'bids', 'asks', 'price', 'quantity');
    }

    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        // they return array( Timestamp, Volume, Close, High, Low, Open )
        return [
            intval ($ohlcv[0] * 1000),   // t
            floatval ($ohlcv[1]), // o
            floatval ($ohlcv[3]), // h
            floatval ($ohlcv[4]), // l
            floatval ($ohlcv[2]), // c
            floatval ($ohlcv[5]), // v
        ];
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'symbol' => $this->market_id($symbol),
            'interval' => $this->timeframes[$timeframe],
            'start_time' => $this->seconds (),
        );
        // max $limit = 1000
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['start_time'] = intval ($since / 1000);
        }
        $response = $this->publicGetMarketKline (array_merge($request, $params));
        //        ordering => Ts, O, C, H, L, V
        //     {
        //         "code" => 200,
        //         "$data" => array(
        //             array( "TS", "o", "c", "h", "l", "v" ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function parse_ticker ($ticker, $market = null) {
        $symbol = null;
        if ($market) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->safe_integer($ticker, 'time');
        $open = $this->safe_float($ticker, 'open');
        $last = $this->safe_float($ticker, 'last');
        $change = null;
        $average = null;
        $percentage = null;
        if (($open !== null) && ($last !== null)) {
            $change = $last - $open;
            $average = $this->sum ($open, $last) / 2;
            if (($last !== null) && ($last > 0)) {
                $percentage = ($change / $open) * 100;
            }
        }
        return array(
            'symbol' => $symbol,
            'info' => $ticker,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => $average,
            'baseVolume' => $this->safe_float($ticker, 'volume'), // gateio has them reversed
            'quoteVolume' => null,
        );
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
    //     $this->load_markets();
    //     $response = $this->publicGetMarketTicker ($params);
    //     $result = array();
    //     $data = $this->safe_value($response, 'data', array());
    //     $ids = is_array($data) ? array_keys($data) : array();
    //     for ($i = 0; $i < count($ids); $i++) {
    //         $id = $ids[$i];
    //         list($baseId, $quoteId) = explode('_', $id);
    //         $base = strtoupper($baseId);
    //         $quote = strtoupper($quoteId);
    //         $base = $this->safe_currency_code($base);
    //         $quote = $this->safe_currency_code($quote);
    //         $symbol = $base . '/' . $quote;
    //         $market = null;
    //         if (is_array($this->markets) && array_key_exists($symbol, $this->markets)) {
    //             $market = $this->markets[$symbol];
    //         }
    //         if (is_array($this->markets_by_id) && array_key_exists($id, $this->markets_by_id)) {
    //             $market = $this->markets_by_id[$id];
    //         }
    //         $result[$symbol] = $this->parse_ticker($data[$id], $market);
    //     }
    //     return $result;
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'symbol' => $this->market_id($symbol),
        );
        $response = $this->publicGetMarketTicker (array_merge($request, $params));
        $ticker = $this->safe_value($response, 'data', array())[0];
        return $this->parse_ticker($ticker, $market);
    }

    public function parse_trade ($trade, $market = null) {
        $timestamp = $this->safe_integer_2($trade, 'create_time', 'trade_time');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        // take either of orderid or orderId
        $id = $this->safe_string($trade, 'order_id');
        $side = $this->safe_string($trade, 'trade_type');
        $isTaker = $this->safe_value($trade, 'is_taker');
        $price = $this->safe_float_2($trade, 'price', 'trade_price');
        $amount = $this->safe_float_2($trade, 'quantity', 'trade_quantity');
        $cost = null;
        if ($price !== null && $amount !== null) {
            $cost = $price * $amount;
        }
        $feeCost = $this->safe_float($trade, 'fee');
        $feeCurrency = $this->safe_string($trade, 'fee_currency');
        $fee = null;
        if (($feeCost !== null) && ($feeCurrency !== null)) {
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrency,
                'rate' => null,
            );
        }
        return array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'order' => $id,
            'type' => 'limit',
            'side' => $side === 'BID' ? 'buy' : 'sell',
            'takerOrMaker' => $isTaker ? 'taker' : 'maker',
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'symbol' => $this->market_id($symbol),
        );
        // max $limit = 1000
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->publicGetMarketDeals (array_merge($request, $params));
        $data = $this->safe_value($response, 'data');
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function parse_order_side ($side) {
        $sides = array(
            'BID' => 'buy',
            'ASK' => 'sell',
        );
        return $this->safe_string($sides, $side, $side);
    }

    public function parse_order_status ($status) {
        $statuses = array(
            'NEW' => 'open',
            'FILLED' => 'closed',
            'PARTIALLY_FILLED' => 'open', // partial closed
            'CANCELED' => 'canceled',
            'PARTIALLY_CANCELED' => 'canceled', // partial canceled
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_type ($type) {
    //     $types = array(
    //         'LIMIT_ORDER' => 'limit',
    //         'POST_ONLY' => 'limit',
    //     );
    //     return $this->safe_string($types, $type, $type);
    }

    public function parse_order ($order, $market = null) {
        // Different API endpoints returns $order info in different format...
        // with different fields $filled->
        $id = $this->safe_string($order, 'id');
        $timestamp = $this->safe_integer($order, 'create_time');
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $symbol = null;
        $marketId = $this->safe_string($order, 'symbol');
        if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
            $market = $this->markets_by_id[$marketId];
        }
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $side = $this->parse_order_side ($this->safe_string($order, 'type'));
        $price = $this->safe_float($order, 'price');
        $amount = $this->safe_float($order, 'quantity');
        $filled = $this->safe_float($order, 'deal_quantity');
        $cost = $this->safe_float($order, 'deal_amount');
        $remaining = null;
        $average = null;
        if ($filled !== null) {
            if ($amount !== null) {
                $remaining = $amount - $filled;
            }
            if (($cost !== null) && ($filled > 0)) {
                $average = $cost / $filled;
            }
        }
        return array(
            'id' => $id,
            'datetime' => $this->iso8601 ($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => 'limit',
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'cost' => $cost,
            'average' => $average,
            'trades' => null,
            'fee' => array(
                'cost' => null,
                'currency' => null,
                'rate' => null,
            ),
            'info' => $order,
        );
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_ids' => $id,
        );
        $response = $this->privateGetOrderQuery (array_merge($request, $params));
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data[0]);
    }

    public function fetch_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'symbol' => $this->market_id($symbol),
            'start_time' => $this->seconds (),
        );
        // max $limit = 1000
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['start_time'] = intval ($since / 1000);
        }
        $response = $this->privateGetOrderList (array_merge($request, $params));
        $data = $this->safe_value($response, 'data');
        return $this->parse_orders($data, null, $since, $limit);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            'states' => 'NEW,PARTIALLY_FILLED',
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function fetch_closed_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            'states' => 'FILLED',
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        if ($type === 'market') {
            throw new ExchangeError($this->id . ' allows limit orders only');
        }
        $this->load_markets();
        $request = array(
            'symbol' => $this->market_id($symbol),
            'price' => $price,
            'quantity' => $amount,
            'trade_type' => ($side === 'buy') ? 'BID' : 'ASK',
        );
        if ($type === 'limit') {
            $request->order_type = 'LIMIT_ORDER';
        }
        $response = $this->privatePostOrderPlace (array_merge($request, $params));
        $id = $this->safe_string($response, 'data');
        $timestamp = $this->milliseconds ();
        $order = array(
            'symbol' => $this->market_id($symbol),
            'id' => $id,
            'price' => $price,
            'quantity' => $amount,
            'create_time' => $timestamp,
            'state' => 'NEW',
            'type' => $request->trade_type,
        );
        return $this->parse_order($order);
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_ids' => $id,
        );
        $response = $this->privateDeleteOrderCancel (array_merge($request, $params));
        $data = $this->safe_value($response, 'data');
        $order = array(
            'id' => $id,
            'state' => 'CANCELED',
            'info' => $data,
        );
        return $this->parse_order($order);
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'symbol' => $this->market_id($symbol),
        );
        // max $limit = 1000
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['start_time'] = intval ($since / 1000);
        }
        $response = $this->privateGetOrderDeals (array_merge($request, $params));
        $data = $this->safe_value($response, 'data');
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $path1 = `/open/api/$array($this->version)/`;
        $origin = $this->urls['api'];
        $url = $this->implode_params($origin, array_merge(array( 'hostname' => $this->hostname ), $params)) . $path1 . $this->implode_params($path, $params);
        $query = $this->omit ($params, $this->extract_params($path), $this->extract_params($origin));
        $request = array(
            'api_key' => $this->apiKey,
        );
        if ($api === 'public') {
            $request = array_merge($request, $query);
            if ($request) {
                $url .= '?' . $this->urlencode ($request);
            }
        } else {
            $this->check_required_credentials();
            $request->req_time = $this->seconds ();
            if (is_array($params) && array_key_exists('recv_window', $params)) {
                $request->recv_window = $params->recv_window;
            }
            if ($method !== 'POST') {
                $request = array_merge($request, $query);
            }
            $request = $this->keysort ($request);
            $auth = $this->urlencode ($request);
            $signature = $this->hmac ($this->encode (implode('\n', array($method, `${$path1}${$path}`, $auth))), $this->encode ($this->secret), 'sha256');
            $suffix = 'sign=' . $signature;
            $url .= '?' . $auth . '&' . $suffix;
            if ($method === 'POST') {
                $body = $this->json ($query);
                $headers = array(
                    'Content-Type' => 'application/json',
                );
            } else {
                $headers = array(
                    'Content-Type' => 'application/x-www-form-urlencoded',
                );
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors ($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        if ($code >= 400) {
            $errorCode = $this->safe_string($response, 'code');
            $message = $this->safe_string($response, 'msg', $body);
            if ($errorCode !== null) {
                $feedback = $this->safe_string($this->errorCodeNames, $errorCode, $message);
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            }
        }
    }
}
